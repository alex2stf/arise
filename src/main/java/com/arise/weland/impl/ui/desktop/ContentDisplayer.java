/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.arise.weland.impl.ui.desktop;

import com.arise.core.tools.models.CompleteHandler;
import com.arise.weland.WelandClient;
import com.arise.weland.dto.ContentInfo;
import com.arise.weland.dto.ContentPage;
import com.arise.weland.dto.DeviceStat;
import com.arise.weland.dto.Playlist;
import com.arise.weland.impl.ContentInfoProvider;

import java.awt.*;
import java.lang.reflect.InvocationTargetException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

/**
 *
 * @author alexandru2.stefan
 */
public class ContentDisplayer extends javax.swing.JPanel implements Runnable {

    private final URI uri;
    private final Playlist playlist;
    private ContentInfoProvider contentInfoProvider;
    int SIZE = 200;
    int MAX_COLUMNS = 4;
    Dimension DIMENSION = new Dimension(SIZE, SIZE);
    private GridLayout gridLayout = new java.awt.GridLayout();


    public ContentDisplayer(URI uri, Playlist playlist, ContentInfoProvider contentInfoProvider) {
        this.uri = uri;
        this.playlist = playlist;
        this.contentInfoProvider = contentInfoProvider;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        gridLayout.setColumns(MAX_COLUMNS);
        java.awt.GridBagConstraints gridBagConstraints;

        toolBar = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        searchTextArea = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        container = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        toolBar.setBackground(new java.awt.Color(204, 255, 204));
        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        jLabel1.setText("Search:");
        toolBar.add(jLabel1);

        searchTextArea.setText("text to search");
        toolBar.add(searchTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        add(toolBar, gridBagConstraints);

        container.setLayout(gridLayout);



        scrollPane.setViewportView(container);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        add(scrollPane, gridBagConstraints);

        fetchData();
    }


    Integer nextIndex = 0;

    volatile boolean isFetching = false;
    private void fetchData(){

        if(isFetching){
            return;
        }

        isFetching = true;
        System.out.println("FETCH " + nextIndex);
        if (nextIndex == null){
            return;
        }
        WelandClient.mediaList(uri, playlist.name(), nextIndex, new CompleteHandler<ContentPage>() {
            @Override
            public void onComplete(ContentPage data) {
                nextIndex = data.getIndex();
                addMediaIcons(data.getData());


                isFetching = false;
                try {
                    Thread.sleep(1000 * 15);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                if (nextIndex != null) {
                    fetchData();
                }

            }
        }, new CompleteHandler() {
            @Override
            public void onComplete(Object data) {
                System.out.println(data);
                isFetching = false;
            }
        });


//        addMediaIcon(new ContentInfo().setPath("test.mp4"));


    }

    public void callFromEdt(Runnable task) {
        if (SwingUtilities.isEventDispatchThread())
            task.run();
        else
            SwingUtilities.invokeLater(task); // You might want to consider
        // using invokeAndWait() instead
    }

    private void addMediaIcons(final List<ContentInfo> data) {
       callFromEdt(new Runnable() {
            @Override
            public void run() {
                for (ContentInfo info : data){
                    addMediaIcon(info);
                }

            }
        });
    }


    private void addMediaIcon(ContentInfo info){
        String text = info.getPath();
        System.out.println("ADD " + text + " from " + Thread.currentThread().getName());
        ContentIcon button = new ContentIcon(info, contentInfoProvider);
        button.setPreferredSize(DIMENSION);
        button.setSize(DIMENSION);
        icons.add(button);
        container.add(button);
        gridLayout.setRows(icons.size() > MAX_COLUMNS ? icons.size() / MAX_COLUMNS : 1);
        container.revalidate();
        container.repaint();
    }

    List<ContentIcon> icons = new ArrayList<>();






    // Variables declaration - do not modify
    private javax.swing.JPanel container;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextField searchTextArea;
    private javax.swing.JToolBar toolBar;

    @Override
    public void run() {

    }
    // End of variables declaration
}
